import java.util.ArrayList;
import java.util.Collections;

public class TreasureHuntGame {
    public static void main(String[] args) {
        // Step 1: Create a 2D array to store treasure items
        String[][] treasureItems = createTreasureItems();

    public static String[][] createTreasureItems() {
        String[][] treasures = new String[52][2];
        String[] types = {"G20", "D15", "S10", "E5"};
        
        for (int i = 0; i < 52; i++) {
            treasures[i][0] = types[i % 4]; // Assigning types in a repeating pattern
            treasures[i][1] = types[i % 4].substring(1); // Extracting value
        }
        return treasures;
      }

        
        // Step 2: Load treasures into an ArrayList
        ArrayList<String> treasureList = loadTreasuresToArrayList(treasureItems);

     public static ArrayList<String> loadTreasuresToArrayList(String[][] treasures) {
        ArrayList<String> treasureList = new ArrayList<>();
        for (String[] treasure : treasures) {
            treasureList.add(treasure[0]); // Adding only the type code
        }
        return treasureList;
    }

        // Step 3: Shuffle the treasures
        shuffleTreasures(treasureList);

     public static void shuffleTreasures(ArrayList<String> treasureList) {
        Collections.shuffle(treasureList);
    }

        // Step 4: Distribute treasures to two players
        ArrayList<String> player1 = new ArrayList<>();
        ArrayList<String> player2 = new ArrayList<>();
        distributeTreasures(treasureList, player1, player2);

    public static void distributeTreasures(ArrayList<String> treasureList, ArrayList<String> player1, ArrayList<String> player2) {
        for (int i = 0; i < treasureList.size(); i++) {
            if (i % 2 == 0) {
                player1.add(treasureList.get(i));
            } else {
                player2.add(treasureList.get(i));
            }
        }
    }

        // Step 5: Calculate total values
        int player1Value = calculateTreasureValue(player1);
        int player2Value = calculateTreasureValue(player2);

    public static int calculateTreasureValue(ArrayList<String> playerTreasures) {
        int totalValue = 0;
        for (String treasure : playerTreasures) {
            totalValue += Integer.parseInt(treasure.substring(1)); // Extract numeric value
        }
        return totalValue;    
    }


        // Step 6: Determine the winner
        determineWinner(player1Value, player2Value);
    public static void determineWinner(int player1Value, int player2Value) {
        if (player1Value > player2Value) {
            System.out.println("Player 1 Wins!");
        } else if (player2Value > player1Value) {
            System.out.println("Player 2 Wins!");
        } else {
            System.out.println("It's a Tie!");
        }
    }


        // Display results
        System.out.println("\nPlayer 1's Treasures: " + player1 + " (Total Value: " + player1Value + ")");
        System.out.println("Player 2's Treasures: " + player2 + " (Total Value: " + player2Value + ")");
    }

    
